#Ytrain
Ytrainfull = select(Xtrainfull, YtrainRelevel) %>% unlist() %>% as.vector()
Ytrainfull = to_categorical(Ytrainfull)
#Xtest
Xtestfull = cbind(YtestRelevel,XtestMat) %>% as.data.frame()
XtestfullMat = select(Xtestfull, -YtestRelevel) %>% as.matrix()
dimnames(XtestfullMat) = NULL
#Ytest
Ytestfull = select(Xtestfull, YtestRelevel) %>% unlist() %>% as.vector()
Ytestfull = to_categorical(Ytestfull)
#actual model
model = keras_model_sequential() %>%
layer_dense(units = 500, activation = "relu",
input_shape = dim(XtrainfullMat)[[2]]) %>%
layer_dense(units = 250, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 125, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 63, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 31, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 8, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 3, activation="sigmoid")
model
model = model %>% compile(optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = "accuracy")
my_model = model %>% fit(XtrainfullMat, Ytrainfull, epoch=10, batch_size=10, validation_split=0.2)
model %>% evaluate(XtestfullMat, Ytestfull)
#confusion Matrix
prob = model %>% predict(XtestfullMat) %>% k_argmax() %>% as.numeric()
Ytestfull = Ytestfull %>% k_argmax() %>% as.numeric()
table(prob, Ytestfull)
#Confusion Matrix
confusionMatrixOut = confusionMatrix(reference = Ytestfull, data = prob)
#adjusting data types
#Xtrain
Xtrainfull = cbind(YtrainRelevel,XtrainMat) %>% as.data.frame()
XtrainfullMat = select(Xtrainfull, -YtrainRelevel) %>% as.matrix()
dimnames(XtrainfullMat) = NULL
#Ytrain
Ytrainfull = select(Xtrainfull, YtrainRelevel) %>% unlist() %>% as.vector()
Ytrainfull = to_categorical(Ytrainfull)
#Xtest
Xtestfull = cbind(YtestRelevel,XtestMat) %>% as.data.frame()
XtestfullMat = select(Xtestfull, -YtestRelevel) %>% as.matrix()
dimnames(XtestfullMat) = NULL
#Ytest
Ytestfull = select(Xtestfull, YtestRelevel) %>% unlist() %>% as.vector()
Ytestfull = to_categorical(Ytestfull)
#actual model
set.seed(123)
model = keras_model_sequential() %>%
layer_dense(units = 500, activation = "relu",
input_shape = dim(XtrainfullMat)[[2]]) %>%
layer_dense(units = 250, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 125, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 63, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 31, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 8, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 3, activation="sigmoid")
model
model = model %>% compile(optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = "accuracy")
my_model = model %>% fit(XtrainfullMat, Ytrainfull, epoch=15, batch_size=10, validation_split=0.2)
model %>% evaluate(XtestfullMat, Ytestfull)
#confusion Matrix
prob = model %>% predict(XtestfullMat) %>% k_argmax() %>% as.numeric()
Ytestfull = Ytestfull %>% k_argmax() %>% as.numeric()
table(prob, Ytestfull)
#adjusting data types
#Xtrain
Xtrainfull = cbind(YtrainRelevel,XtrainMat) %>% as.data.frame()
XtrainfullMat = select(Xtrainfull, -YtrainRelevel) %>% as.matrix()
dimnames(XtrainfullMat) = NULL
#Ytrain
Ytrainfull = select(Xtrainfull, YtrainRelevel) %>% unlist() %>% as.vector()
Ytrainfull = to_categorical(Ytrainfull)
#Xtest
Xtestfull = cbind(YtestRelevel,XtestMat) %>% as.data.frame()
XtestfullMat = select(Xtestfull, -YtestRelevel) %>% as.matrix()
dimnames(XtestfullMat) = NULL
#Ytest
Ytestfull = select(Xtestfull, YtestRelevel) %>% unlist() %>% as.vector()
Ytestfull = to_categorical(Ytestfull)
#actual model
set.seed(123)
model = keras_model_sequential() %>%
layer_dense(units = 500, activation = "relu",
input_shape = dim(XtrainfullMat)[[2]]) %>%
layer_dense(units = 250, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 125, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 63, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 31, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 3, activation="sigmoid")
model
model = model %>% compile(optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = "accuracy")
my_model = model %>% fit(XtrainfullMat, Ytrainfull, epoch=15, batch_size=10, validation_split=0.2)
model %>% evaluate(XtestfullMat, Ytestfull)
#confusion Matrix
prob = model %>% predict(XtestfullMat) %>% k_argmax() %>% as.numeric()
Ytestfull = Ytestfull %>% k_argmax() %>% as.numeric()
table(prob, Ytestfull)
#adjusting data types
#Xtrain
Xtrainfull = cbind(YtrainRelevel,XtrainMat) %>% as.data.frame()
XtrainfullMat = select(Xtrainfull, -YtrainRelevel) %>% as.matrix()
dimnames(XtrainfullMat) = NULL
#Ytrain
Ytrainfull = select(Xtrainfull, YtrainRelevel) %>% unlist() %>% as.vector()
Ytrainfull = to_categorical(Ytrainfull)
#Xtest
Xtestfull = cbind(YtestRelevel,XtestMat) %>% as.data.frame()
XtestfullMat = select(Xtestfull, -YtestRelevel) %>% as.matrix()
dimnames(XtestfullMat) = NULL
#Ytest
Ytestfull = select(Xtestfull, YtestRelevel) %>% unlist() %>% as.vector()
Ytestfull = to_categorical(Ytestfull)
#actual model
set.seed(123)
model = keras_model_sequential() %>%
layer_dense(units = 500, activation = "relu",
input_shape = dim(XtrainfullMat)[[2]]) %>%
layer_dense(units = 250, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 125, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 63, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 31, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 8, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 3, activation="sigmoid")
model
model = model %>% compile(optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = "accuracy")
my_model = model %>% fit(XtrainfullMat, Ytrainfull, epoch=15, batch_size=10, validation_split=0.2)
model %>% evaluate(XtestfullMat, Ytestfull)
#confusion Matrix
prob = model %>% predict(XtestfullMat) %>% k_argmax() %>% as.numeric()
Ytestfull = Ytestfull %>% k_argmax() %>% as.numeric()
table(prob, Ytestfull)
#adjusting data types
#Xtrain
Xtrainfull = cbind(YtrainRelevel,XtrainMat) %>% as.data.frame()
XtrainfullMat = select(Xtrainfull, -YtrainRelevel) %>% as.matrix()
dimnames(XtrainfullMat) = NULL
#Ytrain
Ytrainfull = select(Xtrainfull, YtrainRelevel) %>% unlist() %>% as.vector()
Ytrainfull = to_categorical(Ytrainfull)
#Xtest
Xtestfull = cbind(YtestRelevel,XtestMat) %>% as.data.frame()
XtestfullMat = select(Xtestfull, -YtestRelevel) %>% as.matrix()
dimnames(XtestfullMat) = NULL
#Ytest
Ytestfull = select(Xtestfull, YtestRelevel) %>% unlist() %>% as.vector()
Ytestfull = to_categorical(Ytestfull)
#actual model
set.seed(123)
model = keras_model_sequential() %>%
layer_dense(units = 500, activation = "relu",
input_shape = dim(XtrainfullMat)[[2]]) %>%
layer_dense(units = 250, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 125, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 63, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 31, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 8, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 3, activation="sigmoid")
model
model = model %>% compile(optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = "accuracy")
my_model = model %>% fit(XtrainfullMat, Ytrainfull, epoch=100, batch_size=20, validation_split=0.2)
#adjusting data types
#Xtrain
Xtrainfull = cbind(YtrainRelevel,XtrainMat) %>% as.data.frame()
XtrainfullMat = select(Xtrainfull, -YtrainRelevel) %>% as.matrix()
dimnames(XtrainfullMat) = NULL
#Ytrain
Ytrainfull = select(Xtrainfull, YtrainRelevel) %>% unlist() %>% as.vector()
Ytrainfull = to_categorical(Ytrainfull)
#Xtest
Xtestfull = cbind(YtestRelevel,XtestMat) %>% as.data.frame()
XtestfullMat = select(Xtestfull, -YtestRelevel) %>% as.matrix()
dimnames(XtestfullMat) = NULL
#Ytest
Ytestfull = select(Xtestfull, YtestRelevel) %>% unlist() %>% as.vector()
Ytestfull = to_categorical(Ytestfull)
#actual model
set.seed(123)
model = keras_model_sequential() %>%
layer_dense(units = 500, activation = "relu",
input_shape = dim(XtrainfullMat)[[2]]) %>%
layer_dense(units = 250, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 125, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 63, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 31, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 8, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 3, activation="sigmoid")
model
model = model %>% compile(optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = "accuracy")
my_model = model %>% fit(XtrainfullMat, Ytrainfull, epoch=15, batch_size=20, validation_split=0.2)
model %>% evaluate(XtestfullMat, Ytestfull)
#confusion Matrix
prob = model %>% predict(XtestfullMat) %>% k_argmax() %>% as.numeric()
Ytestfull = Ytestfull %>% k_argmax() %>% as.numeric()
table(prob, Ytestfull)
#adjusting data types
#Xtrain
Xtrainfull = cbind(YtrainRelevel,XtrainMat) %>% as.data.frame()
XtrainfullMat = select(Xtrainfull, -YtrainRelevel) %>% as.matrix()
dimnames(XtrainfullMat) = NULL
#Ytrain
Ytrainfull = select(Xtrainfull, YtrainRelevel) %>% unlist() %>% as.vector()
Ytrainfull = to_categorical(Ytrainfull)
#Xtest
Xtestfull = cbind(YtestRelevel,XtestMat) %>% as.data.frame()
XtestfullMat = select(Xtestfull, -YtestRelevel) %>% as.matrix()
dimnames(XtestfullMat) = NULL
#Ytest
Ytestfull = select(Xtestfull, YtestRelevel) %>% unlist() %>% as.vector()
Ytestfull = to_categorical(Ytestfull)
#actual model
set.seed(123)
model = keras_model_sequential() %>%
layer_dense(units = 500, activation = "relu",
input_shape = dim(XtrainfullMat)[[2]]) %>%
layer_dense(units = 250, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 125, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 63, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 31, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 8, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 3, activation="sigmoid")
model
model = model %>% compile(optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = "accuracy")
my_model = model %>% fit(XtrainfullMat, Ytrainfull, epoch=10, batch_size=5, validation_split=0.2)
model %>% evaluate(XtestfullMat, Ytestfull)
#confusion Matrix
prob = model %>% predict(XtestfullMat) %>% k_argmax() %>% as.numeric()
Ytestfull = Ytestfull %>% k_argmax() %>% as.numeric()
table(prob, Ytestfull)
my_model = model %>% fit(XtrainfullMat, Ytrainfull, epoch=10, batch_size=5, validation_data=c(XtestfullMat, Ytestfull))
my_model = model %>% fit(XtrainfullMat, Ytrainfull, epoch=10, batch_size=5, validation_data=list(XtestfullMat, Ytestfull))
#adjusting data types
#Xtrain
Xtrainfull = cbind(YtrainRelevel,XtrainMat) %>% as.data.frame()
XtrainfullMat = select(Xtrainfull, -YtrainRelevel) %>% as.matrix()
dimnames(XtrainfullMat) = NULL
#Ytrain
Ytrainfull = select(Xtrainfull, YtrainRelevel) %>% unlist() %>% as.vector()
Ytrainfull = to_categorical(Ytrainfull)
#Xtest
Xtestfull = cbind(YtestRelevel,XtestMat) %>% as.data.frame()
XtestfullMat = select(Xtestfull, -YtestRelevel) %>% as.matrix()
dimnames(XtestfullMat) = NULL
#Ytest
Ytestfull = select(Xtestfull, YtestRelevel) %>% unlist() %>% as.vector()
Ytestfull = to_categorical(Ytestfull)
#actual model
set.seed(123)
model = keras_model_sequential() %>%
layer_dense(units = 500, activation = "relu",
input_shape = dim(XtrainfullMat)[[2]]) %>%
layer_dense(units = 250, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 125, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 63, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 31, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 8, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 3, activation="sigmoid")
model
model = model %>% compile(optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = "accuracy")
my_model = model %>% fit(XtrainfullMat, Ytrainfull, epoch=10, batch_size=5, validation_data=list(XtestfullMat, Ytestfull))
model %>% evaluate(XtestfullMat, Ytestfull)
#confusion Matrix
prob = model %>% predict(XtestfullMat) %>% k_argmax() %>% as.numeric()
Ytestfull = Ytestfull %>% k_argmax() %>% as.numeric()
table(prob, Ytestfull)
#adjusting data types
#Xtrain
Xtrainfull = cbind(YtrainRelevel,XtrainMat) %>% as.data.frame()
XtrainfullMat = select(Xtrainfull, -YtrainRelevel) %>% as.matrix()
dimnames(XtrainfullMat) = NULL
#Ytrain
Ytrainfull = select(Xtrainfull, YtrainRelevel) %>% unlist() %>% as.vector()
Ytrainfull = to_categorical(Ytrainfull)
#Xtest
Xtestfull = cbind(YtestRelevel,XtestMat) %>% as.data.frame()
XtestfullMat = select(Xtestfull, -YtestRelevel) %>% as.matrix()
dimnames(XtestfullMat) = NULL
#Ytest
Ytestfull = select(Xtestfull, YtestRelevel) %>% unlist() %>% as.vector()
Ytestfull = to_categorical(Ytestfull)
#actual model
set.seed(123)
model = keras_model_sequential() %>%
layer_dense(units = 500, activation = "relu",
input_shape = dim(XtrainfullMat)[[2]]) %>%
layer_dense(units = 250, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 125, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 63, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 31, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 8, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 4, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 3, activation="sigmoid")
model
model = model %>% compile(optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = "accuracy")
my_model = model %>% fit(XtrainfullMat, Ytrainfull, epoch=50, batch_size=20, validation_data=list(XtestfullMat, Ytestfull))
model %>% evaluate(XtestfullMat, Ytestfull)
#confusion Matrix
prob = model %>% predict(XtestfullMat) %>% k_argmax() %>% as.numeric()
Ytestfull = Ytestfull %>% k_argmax() %>% as.numeric()
table(prob, Ytestfull)
#adjusting data types
#Xtrain
Xtrainfull = cbind(YtrainRelevel,XtrainMat) %>% as.data.frame()
XtrainfullMat = select(Xtrainfull, -YtrainRelevel) %>% as.matrix()
dimnames(XtrainfullMat) = NULL
#Ytrain
Ytrainfull = select(Xtrainfull, YtrainRelevel) %>% unlist() %>% as.vector()
Ytrainfull = to_categorical(Ytrainfull)
#Xtest
Xtestfull = cbind(YtestRelevel,XtestMat) %>% as.data.frame()
XtestfullMat = select(Xtestfull, -YtestRelevel) %>% as.matrix()
dimnames(XtestfullMat) = NULL
#Ytest
Ytestfull = select(Xtestfull, YtestRelevel) %>% unlist() %>% as.vector()
Ytestfull = to_categorical(Ytestfull)
#actual model
set.seed(123)
model = keras_model_sequential() %>%
layer_dense(units = 500, activation = "relu",
input_shape = dim(XtrainfullMat)[[2]]) %>%
layer_dense(units = 250, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 125, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 63, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 31, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 8, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 4, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 3, activation="sigmoid")
model
model = model %>% compile(optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = "accuracy")
my_model = model %>% fit(XtrainfullMat, Ytrainfull, epoch=20, batch_size=20, validation_data=list(XtestfullMat, Ytestfull))
model %>% evaluate(XtestfullMat, Ytestfull)
#confusion Matrix
prob = model %>% predict(XtestfullMat) %>% k_argmax() %>% as.numeric()
Ytestfull = Ytestfull %>% k_argmax() %>% as.numeric()
table(prob, Ytestfull)
#adjusting data types
#Xtrain
Xtrainfull = cbind(YtrainRelevel,XtrainMat) %>% as.data.frame()
XtrainfullMat = select(Xtrainfull, -YtrainRelevel) %>% as.matrix()
dimnames(XtrainfullMat) = NULL
#Ytrain
Ytrainfull = select(Xtrainfull, YtrainRelevel) %>% unlist() %>% as.vector()
Ytrainfull = to_categorical(Ytrainfull)
#Xtest
Xtestfull = cbind(YtestRelevel,XtestMat) %>% as.data.frame()
XtestfullMat = select(Xtestfull, -YtestRelevel) %>% as.matrix()
dimnames(XtestfullMat) = NULL
#Ytest
Ytestfull = select(Xtestfull, YtestRelevel) %>% unlist() %>% as.vector()
Ytestfull = to_categorical(Ytestfull)
#actual model
set.seed(123)
model = keras_model_sequential() %>%
layer_dense(units = 500, activation = "relu",
input_shape = dim(XtrainfullMat)[[2]]) %>%
layer_dense(units = 250, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 125, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 63, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 31, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 8, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 4, activation = "relu") %>%
layer_dropout(rate=0.5) %>%
layer_dense(units = 3, activation="sigmoid")
model
model = model %>% compile(optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = "accuracy")
my_model = model %>% fit(XtrainfullMat, Ytrainfull, epoch=15, batch_size=10, validation_data=list(XtestfullMat, Ytestfull))
model %>% evaluate(XtestfullMat, Ytestfull)
#confusion Matrix
prob = model %>% predict(XtestfullMat) %>% k_argmax() %>% as.numeric()
Ytestfull = Ytestfull %>% k_argmax() %>% as.numeric()
table(prob, Ytestfull)
set.seed(123)
tuneGridRanger = data.frame(splitrule = 'gini',min.node.size = c(10,50,100),
mtry = round(sqrt(ncol(XtrainMat))))
rfOut = train(x = XtrainMat, y = YtrainRelevel,
method = "ranger",
num.trees = 500,
tuneGrid = tuneGridRanger,
metric = 'Accuracy',
trControl = trainControl)
plot(rfOut$finalModel)
rfOut$finalModel
rfOut$finalModel
plot(rfOut$bestTune)
plot(rfOut$control)
plot(rfOut)
plot(rfOut$finalModel)
plot(rfOut$modelInfo)
rfOut$modelInfo
plot(rfOut$control)
plot(rfOut)
set.seed(123)
tuneGrid = data.frame('nrounds'=c(50,150,500,1000,2000,3000),
'max_depth' = 4,
'eta' = .1,
'gamma' = 0,
'colsample_bytree' = 1,
'min_child_weight' = 0,
'subsample' = 0.25)
boostOut = train(x = XtrainMat, y = YtrainRelevel,
method = "xgbTree",
tuneGrid = tuneGrid,
metric = 'Accuracy',
trControl = trainControl)
plot(boostOut)
boostOut$results
boostOut$bestTune
Yhattestboost = predict(boostOut, XtestMat)
#confusion matrix
confusionMatrixOut = confusionMatrix(reference = Ytest, data = Yhattestboost)
confusionMatrixOut$table
print(confusionMatrixOut$overall[1:2])
print(confusionMatrixOut$byClass[1:2])
