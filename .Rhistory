x %>%
is.na %>%
melt %>%
ggplot(data = .,
aes(x = Var2,
y = Var1)) +
geom_raster(aes(fill = value)) +
scale_fill_grey(name = "",
labels = c("Present","Missing")) +
theme_minimal() +
theme(axis.text.x = element_text(angle=45, vjust=0.5)) +
labs(x = "Variables in Dataset",
y = "Rows / observations")
}
ggplot_missing(data) # visualize missing data
round(colMeans(is.na(data))*100,3)
data = data %>% select_if(~mean(is.na(.))<=0.33) # drop features with a lot of NAs
dim(data) # dimensions of altered dataset
data = data %>% select_if(~mean(is.na(.))<=0.33) # drop features with a lot of NAs
(dim(data)) # dimensions of altered dataset
table(sapply(data[1,],class)) # number of features per data type
str(data) # overview of data types
sapply(data,function(x){ length(unique(x))})
# features with only one value that will be dropped:
#     collections_12_mths_ex_med,
#     application_type,
#     policy_code,
#     chargeoff_within_12_mths
#     init_list_status
#     acc_now_delinq
#     delinq_amnt
data = data %>% select(-c(collections_12_mths_ex_med,
application_type,
policy_code,
chargeoff_within_12_mths,
initial_list_status,
acc_now_delinq,
delinq_amnt,
tax_liens))
# These features are uninformative and will be dropped:
# We may need to state why they are uninformative.
# zip_code
# id
# member_id
# emp_title
# title
# issue_d
# last_pymnt_d
# last_credit_pull_d
# earliest_cr_line
# url
# desc
data = data %>% select(-c(zip_code,
id,
member_id,
emp_title,
title,
issue_d,
last_pymnt_d,
last_credit_pull_d,
earliest_cr_line,
url,
desc))
# Keep only the features that are available to us before someone invested on the loan.
# Features that were not available before loan disbursement:
# total_pymnt
# total_pymnt_inv
# total_rec_prncp,
# total_rec_int,
# total_rec_late_fee,
# recoveries,
# collection_recovery_fee,
# last_pymnt_d,
# last_pymnt_amnt,
data = data %>% select(-c(total_pymnt,
total_pymnt_inv,
total_rec_prncp,
total_rec_int,
total_rec_late_fee,
recoveries,
collection_recovery_fee,
last_pymnt_amnt))
str(data)
table(data$purpose)
table(data$pymnt_plan)
knitr::opts_chunk$set(echo = TRUE)
packs = c('dplyr','ggplot2','caret','corrplot','e1071','readr', 'reshape2')
lapply(packs,require,character.only=T)
data = read_csv("Data/LoanStats3a.csv")
#Transform loan status
data$loan_status[data$loan_status == "Charged Off"] = "Default"
data$loan_status[data$loan_status == "Does not meet the credit policy. Status:Charged Off"] = "Default"
data= data %>% filter(loan_status == "Default" | loan_status == "Fully Paid")
unique(data$loan_status)
data%>%select(loan_status)%>%group_by(loan_status)%>%count(.)
anyNA(data) # to see if there are any missing values in the dataset
dim(data) # number of observations and features
ggplot_missing <- function(x){
if(!require(reshape2)){warning('you need to install reshape2')}
require(reshape2)
require(ggplot2)
#### This function produces a plot of the missing data pattern
#### in x. It is a modified version of a function in the 'neato' package
x %>%
is.na %>%
melt %>%
ggplot(data = .,
aes(x = Var2,
y = Var1)) +
geom_raster(aes(fill = value)) +
scale_fill_grey(name = "",
labels = c("Present","Missing")) +
theme_minimal() +
theme(axis.text.x = element_text(angle=45, vjust=0.5)) +
labs(x = "Variables in Dataset",
y = "Rows / observations")
}
ggplot_missing(data) # visualize missing data
round(colMeans(is.na(data))*100,3)
data = data %>% select_if(~mean(is.na(.))<=0.33) # drop features with a lot of NAs
dim(data) # dimensions of altered dataset
table(sapply(data[1,],class)) # number of features per data type
str(data) # overview of data types
sapply(data,function(x){ length(unique(x))})
# features with only one value that will be dropped:
#     collections_12_mths_ex_med,
#     application_type,
#     policy_code,
#     chargeoff_within_12_mths
#     init_list_status
#     acc_now_delinq
#     delinq_amnt
data = data %>% select(-c(collections_12_mths_ex_med,
application_type,
policy_code,
chargeoff_within_12_mths,
initial_list_status,
acc_now_delinq,
delinq_amnt,
tax_liens))
# These features are uninformative and will be dropped:
# We may need to state why they are uninformative.
# zip_code
# id
# member_id
# emp_title
# title
# url
# desc
data = data %>% select(-c(zip_code,
id,
member_id,
emp_title,
title,
url,
desc))
# Keep only the features that are available to us before someone invested on the loan.
# Features that were not available before loan disbursement:
# total_pymnt
# total_pymnt_inv
# total_rec_prncp,
# total_rec_int,
# total_rec_late_fee,
# recoveries,
# collection_recovery_fee,
# last_pymnt_d,
# last_pymnt_amnt,
data = data %>% select(-c(total_pymnt,
total_pymnt_inv,
total_rec_prncp,
total_rec_int,
total_rec_late_fee,
recoveries,
collection_recovery_fee,
last_pymnt_amnt))
str(data)
##### Dates converted to factors for now
# Are you guys cool with converting some of these dates to numeric values where we can? # I think they could be a little more useful this way instead of just leaving them out of the model or converting them all as factors.
#issue_d: date
#last_pymnt_d: date
#last_credit_pull_d: date
#earliest_cr_line: date
# Converting employment length to number of years they have been employed.
data$emp_length[which(data$emp_length == "10+ years")] = 10
data$emp_length[which(data$emp_length == "< 1 year")] = 0
data$emp_length[which(data$emp_length == "n/a")] = NA
data$emp_length = sub(" years", "", data$emp_length)
data$emp_length = sub(" year", "", data$emp_length)
data$emp_length = as.numeric(data$emp_length)
#Converted issue_d to the month that the loan was issued
data$issue_d = sub("-.*", "", data$issue_d) %>% as.factor(.)
#If you look at the properties of the excel file it says it was last updated in 2016. This code will convert earliest_cr_line to the number of years since their earliest credit line.
data$earliest_cr_line = sub(".*-", "", data$earliest_cr_line) %>% as.numeric(.)
current = 16 - data$earliest_cr_line[data$earliest_cr_line < 20]
old = data$earliest_cr_line[data$earliest_cr_line > 20] %>% as.character(.)
old = paste("19",old)
old = sub(" ","", old) %>% as.numeric(.)
old = 2016 - old
current = as.character(current)
old = as.character(old)
data$earliest_cr_line = as.numeric(c(current, old))
table(data$earliest_cr_line)
```{r data, include=F}
data = read_csv("Data/LoanStats3a.csv")
#Transform loan status
data$loan_status[data$loan_status == "Charged Off"] = "Default"
data$loan_status[data$loan_status == "Does not meet the credit policy. Status:Charged Off"] = "Default"
data= data %>% filter(loan_status == "Default" | loan_status == "Fully Paid")
unique(data$loan_status)
data%>%select(loan_status)%>%group_by(loan_status)%>%count(.)
anyNA(data) # to see if there are any missing values in the dataset
dim(data) # number of observations and features
round(colMeans(is.na(data))*100,3)
data = data %>% select_if(~mean(is.na(.))<=0.33) # drop features with a lot of NAs
dim(data) # dimensions of altered dataset
table(sapply(data[1,],class)) # number of features per data type
str(data) # overview of data types
sapply(data,function(x){ length(unique(x))})
# features with only one value that will be dropped:
#     collections_12_mths_ex_med,
#     application_type,
#     policy_code,
#     chargeoff_within_12_mths
#     init_list_status
#     acc_now_delinq
#     delinq_amnt
data = data %>% select(-c(collections_12_mths_ex_med,
application_type,
policy_code,
chargeoff_within_12_mths,
initial_list_status,
acc_now_delinq,
delinq_amnt,
tax_liens))
# These features are uninformative and will be dropped:
# We may need to state why they are uninformative.
# zip_code
# id
# member_id
# emp_title
# title
# url
# desc
data = data %>% select(-c(zip_code,
id,
member_id,
emp_title,
title,
url,
desc))
# Keep only the features that are available to us before someone invested on the loan.
# Features that were not available before loan disbursement:
# total_pymnt
# total_pymnt_inv
# total_rec_prncp,
# total_rec_int,
# total_rec_late_fee,
# recoveries,
# collection_recovery_fee,
# last_pymnt_d,
# last_pymnt_amnt,
data = data %>% select(-c(total_pymnt,
total_pymnt_inv,
total_rec_prncp,
total_rec_int,
total_rec_late_fee,
recoveries,
collection_recovery_fee,
last_pymnt_amnt))
##### Dates converted to factors for now
# Are you guys cool with converting some of these dates to numeric values where we can? # I think they could be a little more useful this way instead of just leaving them out of the model or converting them all as factors.
#issue_d: date
#last_pymnt_d: date
#last_credit_pull_d: date
#earliest_cr_line: date
# Converting employment length to number of years they have been employed.
data$emp_length[which(data$emp_length == "10+ years")] = 10
data$emp_length[which(data$emp_length == "< 1 year")] = 0
data$emp_length[which(data$emp_length == "n/a")] = NA
data$emp_length = sub(" years", "", data$emp_length)
data$emp_length = sub(" year", "", data$emp_length)
data$emp_length = as.numeric(data$emp_length)
#Converted issue_d to the month that the loan was issued
data$issue_d = sub("-.*", "", data$issue_d) %>% as.factor(.)
#If you look at the properties of the excel file it says it was last updated in 2016. This code will convert earliest_cr_line to the number of years since their earliest credit line.
table(data$earliest_cr_line)
data$earliest_cr_line = sub(".*-", "", data$earliest_cr_line) %>% as.numeric(.)
table(data$earliest_cr_line)
current = 16 - data$earliest_cr_line[data$earliest_cr_line < 20]
old = data$earliest_cr_line[data$earliest_cr_line > 20] %>% as.character(.)
old = paste("19",old)
table(old)
old = sub(" ","", old) %>% as.numeric(.)
table(old)
old = 2016 - old
table(current)
16 - data$earliest_cr_line[data$earliest_cr_line < 20]
data$earliest_cr_line[data$earliest_cr_line < 20]
data$earliest_cr_line[data$earliest_cr_line < 20]
data = read_csv("Data/LoanStats3a.csv")
#Transform loan status
data$loan_status[data$loan_status == "Charged Off"] = "Default"
data$loan_status[data$loan_status == "Does not meet the credit policy. Status:Charged Off"] = "Default"
data= data %>% filter(loan_status == "Default" | loan_status == "Fully Paid")
unique(data$loan_status)
data%>%select(loan_status)%>%group_by(loan_status)%>%count(.)
anyNA(data) # to see if there are any missing values in the dataset
dim(data) # number of observations and features
ggplot_missing <- function(x){
if(!require(reshape2)){warning('you need to install reshape2')}
require(reshape2)
require(ggplot2)
#### This function produces a plot of the missing data pattern
#### in x. It is a modified version of a function in the 'neato' package
x %>%
is.na %>%
melt %>%
ggplot(data = .,
aes(x = Var2,
y = Var1)) +
geom_raster(aes(fill = value)) +
scale_fill_grey(name = "",
labels = c("Present","Missing")) +
theme_minimal() +
theme(axis.text.x = element_text(angle=45, vjust=0.5)) +
labs(x = "Variables in Dataset",
y = "Rows / observations")
}
round(colMeans(is.na(data))*100,3)
data = data %>% select_if(~mean(is.na(.))<=0.33) # drop features with a lot of NAs
dim(data) # dimensions of altered dataset
table(sapply(data[1,],class)) # number of features per data type
str(data) # overview of data types
str(data) # overview of data types
sapply(data,function(x){ length(unique(x))})
# features with only one value that will be dropped:
#     collections_12_mths_ex_med,
#     application_type,
#     policy_code,
#     chargeoff_within_12_mths
#     init_list_status
#     acc_now_delinq
#     delinq_amnt
data = data %>% select(-c(collections_12_mths_ex_med,
application_type,
policy_code,
chargeoff_within_12_mths,
initial_list_status,
acc_now_delinq,
delinq_amnt,
tax_liens))
# These features are uninformative and will be dropped:
# We may need to state why they are uninformative.
# zip_code
# id
# member_id
# emp_title
# title
# url
# desc
data = data %>% select(-c(zip_code,
id,
member_id,
emp_title,
title,
url,
desc))
# Keep only the features that are available to us before someone invested on the loan.
# Features that were not available before loan disbursement:
# total_pymnt
# total_pymnt_inv
# total_rec_prncp,
# total_rec_int,
# total_rec_late_fee,
# recoveries,
# collection_recovery_fee,
# last_pymnt_d,
# last_pymnt_amnt,
data = data %>% select(-c(total_pymnt,
total_pymnt_inv,
total_rec_prncp,
total_rec_int,
total_rec_late_fee,
recoveries,
collection_recovery_fee,
last_pymnt_amnt))
##### Dates converted to factors for now
# Are you guys cool with converting some of these dates to numeric values where we can? # I think they could be a little more useful this way instead of just leaving them out of the model or converting them all as factors.
#issue_d: date
#last_pymnt_d: date
#last_credit_pull_d: date
#earliest_cr_line: date
# Converting employment length to number of years they have been employed.
data$emp_length[which(data$emp_length == "10+ years")] = 10
data$emp_length[which(data$emp_length == "< 1 year")] = 0
data$emp_length[which(data$emp_length == "n/a")] = NA
data$emp_length = sub(" years", "", data$emp_length)
data$emp_length = sub(" year", "", data$emp_length)
data$emp_length = as.numeric(data$emp_length)
#Converted issue_d to the month that the loan was issued
data$issue_d = sub("-.*", "", data$issue_d) %>% as.factor(.)
data$earliest_cr_line[data$earliest_cr_line < 20]
table(data$earliest_cr_line)
sub("[0-9].*","2016", data$earliest_cr_line)
table(data$earliest_cr_line)
sub("[0-9]-.*","2016", data$earliest_cr_line)
table(data$earliest_cr_line)
data$earliest_cr_line = sub(".*-", "", data$earliest_cr_line) %>% as.numeric(.)
data$earliest_cr_line = sub("[0-9]-.*",16, data$earliest_cr_line)
table(data$earliest_cr_line)
current = 16 - data$earliest_cr_line[data$earliest_cr_line < 20]
table(data$earliest_cr_line)
16 - data$earliest_cr_line[data$earliest_cr_line < 20]
data$earliest_cr_line < 20
table(data$earliest_cr_line)
data = read_csv("Data/LoanStats3a.csv")
#Transform loan status
data$loan_status[data$loan_status == "Charged Off"] = "Default"
data$loan_status[data$loan_status == "Does not meet the credit policy. Status:Charged Off"] = "Default"
data= data %>% filter(loan_status == "Default" | loan_status == "Fully Paid")
unique(data$loan_status)
data%>%select(loan_status)%>%group_by(loan_status)%>%count(.)
data = data %>% select_if(~mean(is.na(.))<=0.33) # drop features with a lot of NAs
dim(data) # dimensions of altered dataset
table(sapply(data[1,],class)) # number of features per data type
str(data) # overview of data types
sapply(data,function(x){ length(unique(x))})
data = data %>% select(-c(collections_12_mths_ex_med,
application_type,
policy_code,
chargeoff_within_12_mths,
initial_list_status,
acc_now_delinq,
delinq_amnt,
tax_liens))
data = data %>% select(-c(zip_code,
id,
member_id,
emp_title,
title,
url,
desc))
data = data %>% select(-c(total_pymnt,
total_pymnt_inv,
total_rec_prncp,
total_rec_int,
total_rec_late_fee,
recoveries,
collection_recovery_fee,
last_pymnt_amnt))
# Converting employment length to number of years they have been employed.
data$emp_length[which(data$emp_length == "10+ years")] = 10
data$emp_length[which(data$emp_length == "< 1 year")] = 0
data$emp_length[which(data$emp_length == "n/a")] = NA
data$emp_length = sub(" years", "", data$emp_length)
data$emp_length = sub(" year", "", data$emp_length)
data$emp_length = as.numeric(data$emp_length)
#Converted issue_d to the month that the loan was issued
data$issue_d = sub("-.*", "", data$issue_d) %>% as.factor(.)
table(data$earliest_cr_line)
sub("[0-9]-.*","16", data$earliest_cr_line)
table(data$earliest_cr_line)
sub("[0-9]-[a-z]","16", data$earliest_cr_line)
sub("[0-9]-[]","16", data$earliest_cr_line)
sub("[0-9]-","16", data$earliest_cr_line)
table(sub("[0-9]-","16", data$earliest_cr_line))
table(data$earliest_cr_line)
table(data$earliest_cr_line)
data = read_csv("Data/LoanStats3a.csv")
#Transform loan status
data$loan_status[data$loan_status == "Charged Off"] = "Default"
data$loan_status[data$loan_status == "Does not meet the credit policy. Status:Charged Off"] = "Default"
data= data %>% filter(loan_status == "Default" | loan_status == "Fully Paid")
unique(data$loan_status)
data%>%select(loan_status)%>%group_by(loan_status)%>%count(.)
data = data %>% select_if(~mean(is.na(.))<=0.33) # drop features with a lot of NAs
dim(data) # dimensions of altered dataset
table(sapply(data[1,],class)) # number of features per data type
str(data) # overview of data types
data = data %>% select(-c(collections_12_mths_ex_med,
application_type,
policy_code,
chargeoff_within_12_mths,
initial_list_status,
acc_now_delinq,
delinq_amnt,
tax_liens))
data = data %>% select(-c(zip_code,
id,
member_id,
emp_title,
title,
url,
desc))
data = data %>% select(-c(total_pymnt,
total_pymnt_inv,
total_rec_prncp,
total_rec_int,
total_rec_late_fee,
recoveries,
collection_recovery_fee,
last_pymnt_amnt))
# Converting employment length to number of years they have been employed.
data$emp_length[which(data$emp_length == "10+ years")] = 10
data$emp_length[which(data$emp_length == "< 1 year")] = 0
data$emp_length[which(data$emp_length == "n/a")] = NA
data$emp_length = sub(" years", "", data$emp_length)
data$emp_length = sub(" year", "", data$emp_length)
data$emp_length = as.numeric(data$emp_length)
#Converted issue_d to the month that the loan was issued
data$issue_d = sub("-.*", "", data$issue_d) %>% as.factor(.)
table(data$earliest_cr_line)
